{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#reference-free-orthology-free-annotation-free-discordance-aware-estimation-of-species-tree-roadies","title":"Reference-free Orthology-free Annotation-free DIscordance aware Estimation of Species tree (ROADIES)","text":""},{"location":"#roadies-video-tutorial","title":"ROADIES Video Tutorial","text":""},{"location":"#introduction","title":"Introduction","text":"<p>Welcome to the official wiki of ROADIES, a novel pipeline designed for phylogenetic tree inference of the species directly from their raw genomic assemblies. ROADIES offers a fully automated, easy-to-use, scalable solution, eliminating any manual steps and providing unique flexibility in adjusting the tradeoff between accuracy and runtime.  </p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Reference-free: ROADIES ensures unbiased results by eliminating reference bias, enabling accurate species tree inference by randomly sampling genes from raw genome assemblies.</li> <li>Orthology-free: ROADIES automates the process of species tree inference from their raw genome assemblies without requiring any intermediate gene annotations or orthologous groups. It allows multi-copy gene trees (inferred from homologous regions) and does not require the challenging step of orthologous detection prior to gene tree inference. </li> <li>Annotation-free: ROADIES does not require any input genome annotations, as ROADIES randomly samples genes within the pipeline itself.</li> <li>Discordance-aware: Instead of single-copy genes, ROADIES considers multi-copy genes while analyzing species trees and takes care of the possible gene discordances such as paralogs, horizontal gene transfer, incomplete lineage sorting. It uses a state-of-the-art and statistically consistent discordance-aware method to combine gene trees into a species tree.</li> <li>Scalability: ROADIES handles both small-scale and large-scale datasets efficiently, including diverse life forms such as mammals, flies, and birds. ROADIES also scales efficiently with multiple cores and produces faster results.</li> <li>Flexibility: ROADIES allows users to tune the tradeoff between accuracy and runtime by configuring the parameters and tailoring the pipeline to their specific needs.</li> <li>Debugging options: ROADIES provides multiple plots as output for graphical analysis, making it easier for the user to debug. </li> </ul>"},{"location":"#roadies-pipeline-overview","title":"ROADIES Pipeline Overview","text":"<p>ROADIES pipeline consists of multiple stages, from raw genome assemblies to species tree estimation, with several user-configurable parameters in each stage. </p> <ul> <li>Stage 1: Random Sampling: ROADIES randomly samples a configured number of subsequences from input genomic assemblies. Each of the subsequences is treated as a gene.</li> <li>Stage 2: Pairwise alignment: All sampled subsequences or genes are aligned with all input assemblies individually to find the homologous regions using the pairwise alignment tool LASTZ. </li> <li>Stage 3: Filtering of alignments: ROADIES filters the low-quality alignments to reduce further redundant computation and limits the number of repetitive alignments from small genomic regions. </li> <li>Stage 4: Multiple sequence alignment: ROADIES gathers the homologous regions for all genes across species and performs multiple sequence alignments for each of them using PASTA. </li> <li>Stage 5: Gene tree estimation: ROADIES estimates gene trees from multiple sequence alignments of each of the genes using the maximum-likelihood based tree estimation tool RAxML-NG.</li> <li>Stage 6: Species tree estimation: After getting all the gene trees, ROADIES performs species tree estimation using a widely adopted discordance aware species tree estimation tool ASTRAL-Pro. </li> </ul>"},{"location":"#modes-of-operation","title":"Modes of operation","text":"<p>ROADIES supports multiple modes of operation based on various user requirements considering the tradeoff between accuracy and runtime. </p> <ul> <li>Accurate-Mode: This is the default mode of operation and is preferred for accuracy-critical use cases. Here, the multiple sequence alignment stage is performed by PASTA and the tree-building stage is governed by RAxML-NG.</li> <li>Fast-Mode: This mode of operation is preferred for achieving faster results, for runtime-critical use cases. Here, the multiple sequence alignment and tree-building stage is performed by MashTree.</li> <li>Balanced-Mode: This mode of operation is preferred where the user wants an optimal runtime vs accuracy tradeoff. Here, the multiple sequence alignment stage is performed by PASTA, and the tree-building stage is performed using FastTree. </li> </ul> <p>Note</p> <p>These modes of operation can be modified using command line argument <code>--mode</code> (details mentioned in the Usage section).</p> <p>Note</p> <p>ROADIES also supports another mode of operation for datasets from deeper evolutionary timescales. If your datasets are from distant timescales, we recommend to switch on this mode (by adding extra argument <code>--deep True</code>; details mentioned in the Usage section).</p>"},{"location":"#convergence-mechanism","title":"Convergence Mechanism","text":"<p>The initial count of the genes is crucial to get the accurate species tree at the end. The number of genes sufficient for getting the accurate tree also varies with datasets. Hence, ROADIES incorporates an adaptive algorithm for establishing accurate trees by tracking its confident scores. It performs multiple iterations of the entire pipeline and stops if it gets the confident tree, otherwise it continues with more gene counts. The confidence of the tree is evaluated by the confidence of its branches (or local posterior probability). The tree having most of the confident branches with high posterior probability are considered to be confident and stable. </p> <p>Note</p> <p>ASTRAL-Pro3 provides the information of all the internal nodes in the form of quartets (and its support values, such as local posterior probability) for every species tree per iteration. ROADIES gathers this information and keeps track of all the nodes with high support values. If the percentage change in the number of highly supported nodes gets minimal with a given number of iterations, then we say that the species tree is now converged.</p> <p>Note</p> <p>Users have the option to run ROADIES in non converge mode (for only one iteration) using <code>--noconverge</code> argument (details mentioned in Usage section).</p> <p></p>"},{"location":"cite/","title":"Cite ROADIES","text":"<p>If you use ROADIES in your research or publications, please cite the following paper:</p> <p>A. Gupta, S. Mirarab, &amp; Y. Turakhia, Accurate, scalable, and fully automated inference of species trees from raw genome assemblies using ROADIES, Proc. Natl. Acad. Sci. U.S.A. 122 (19) e2500553122, https://doi.org/10.1073/pnas.2500553122 (2025).</p>"},{"location":"cite/#accessing-roadies-output-files","title":"Accessing ROADIES output files","text":"<p>The output files with the gene trees and species trees generated by ROADIES in the manuscript are deposited to Dryad. To access it, please refer to the following:</p> <p>Gupta, Anshu; Mirarab, Siavash; Turakhia, Yatish (2024). Accurate, scalable, and fully automated inference of species trees from raw genome assemblies using ROADIES [Dataset]. Dryad. https://doi.org/10.5061/dryad.tht76hf73.</p>"},{"location":"contribution/","title":"Contributions","text":"<p>Thank you for considering contributing to ROADIES! We value your input and want to make it as easy as possible to get involved. Whether you're reporting a bug, adding a feature, or improving documentation, this guide will help you understand how to contribute effectively.</p>"},{"location":"contribution/#table-of-contents","title":"Table of Contents","text":"<ul> <li>How to Contribute<ul> <li>Reporting Bugs</li> <li>Suggesting Features</li> <li>Documentation Update</li> <li>Submitting Changes</li> </ul> </li> <li>Pull Request Guidelines</li> <li>License</li> <li>Contact Information</li> </ul>"},{"location":"contribution/#how-to-contribute","title":"How to Contribute","text":""},{"location":"contribution/#reporting-bugs","title":"Reporting Bugs","text":"<p>If you find a bug, please open an issue and include:</p> <ul> <li>A clear description of the issue, including steps to reproduce it.</li> <li>Screenshots or logs if applicable.</li> </ul>"},{"location":"contribution/#suggesting-features","title":"Suggesting Features","text":"<p>We welcome feature requests! Please open a new feature request issue and include:</p> <ul> <li>A clear description of the feature.</li> <li>Use a label for the issue you created - <code>new feature request</code>.</li> <li>Why it would be useful and how it fits with the project\u2019s existing features.</li> <li>Any alternatives you've considered.</li> </ul>"},{"location":"contribution/#documentation-update","title":"Documentation Update","text":"<p>If you want to suggest some updates/modifications in our documentation or, please open a new documentation issue and include:</p> <ul> <li>Clear description of the modifications or suggested additions.</li> <li>Use a label for the issue you created - <code>documentation</code>.</li> </ul>"},{"location":"contribution/#submitting-changes","title":"Submitting Changes","text":"<ol> <li>Fork the repository.</li> <li>Create a new branch (<code>git checkout -b feature/your-feature</code>).</li> <li>Make your changes.</li> <li>Ensure your changes pass all tests. To check that, run the following command:</li> </ol> <p><pre><code>cd ROADIES\npython run_roadies.py --cores 16\n</code></pre> After running this command, if you are able to successfully create the final species tree, the changes passed the test and its ready to be pushed to the forked repository. </p> <ol> <li>Commit your changes (<code>git commit -m 'Add new feature'</code>).</li> <li>Push your changes to your fork (<code>git push origin feature/your-feature</code>).</li> <li>Create a pull request.</li> </ol> <p>Please keep your pull requests small and focused. Large pull requests are harder to review and can delay the process.</p>"},{"location":"contribution/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<ul> <li>Ensure the title is concise but descriptive.</li> <li>Include a detailed description of what the pull request does.</li> <li>Follow the commit message guidelines.</li> <li>Link to any related issues or pull requests.</li> </ul>"},{"location":"contribution/#license","title":"License","text":"<p>By contributing, you agree that your contributions will be licensed under the MIT License.</p>"},{"location":"contribution/#contact-information","title":"Contact Information","text":"<p>For general inquiries and support, reach out to our team.</p> <p>Anshu Gupta - ang037 [at] ucsd [dot] edu</p> <p>Yatish Turakhia - yturakhia [at] ucsd [dot] edu</p>"},{"location":"install/","title":"Installation Methods","text":"<p>Please follow any of the options below to install ROADIES in your system. </p>"},{"location":"install/#option-1-install-via-bioconda-recommended","title":"Option 1: Install via Bioconda (Recommended)","text":"<ol> <li>Install Conda (if not installed):</li> </ol> <pre><code>wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh\nchmod +x Miniconda3-latest-Linux-x86_64.sh\n./Miniconda3-latest-Linux-x86_64.sh\n\nexport PATH=\"$HOME/miniconda3/bin:$PATH\"\nsource ~/.bashrc\n</code></pre> <ol> <li>Configure Conda channels:</li> </ol> <p><pre><code>conda config --add channels defaults\n</code></pre> <pre><code>conda config --add channels bioconda\n</code></pre> <pre><code>conda config --add channels conda-forge\n</code></pre></p> <p>Verify the installation by running <code>conda</code> in your terminal</p> <ol> <li>Create and activate a custom environment:</li> </ol> <p><pre><code>conda create -n roadies_env python=3.9 ete3 seaborn\n</code></pre> <pre><code>conda activate roadies_env\n</code></pre></p> <ol> <li>Install ROADIES:</li> </ol> <pre><code>conda install roadies=0.1.10\n</code></pre> <ol> <li>Locate the installed files:</li> </ol> <pre><code>cd $CONDA_PREFIX/ROADIES\n</code></pre> <p>Now, you will be able to find the contents of the repository within this ROADIES folder.</p> <ol> <li>Run the following commands:</li> </ol> <pre><code>git clone https://github.com/smirarab/pasta.git\ngit clone https://github.com/smirarab/sate-tools-linux.git\ncd pasta\npython3 setup.py develop --user\n</code></pre> <p>Also, in the <code>align.smk</code> file (inside the <code>workflow/rules</code> directory of the ROADIES repository), please replace any instance of:</p> <ul> <li><code>pasta.py</code> with <code>python pasta/run_pasta.py</code></li> <li><code>run_seqtools.py</code> with <code>python pasta/run_seqtools.py</code></li> </ul> <p>After following all these steps, now you are ready to follow the Quick Start section to run the pipeline. Make sure to go back to the main directory to follow the next steps:</p> <pre><code>cd ROADIES\n</code></pre>"},{"location":"install/#option-2-install-via-dockerhub","title":"Option 2: Install via DockerHub","text":"<p>If you would like to install ROADIES using DockerHub, follow these steps:</p> <ol> <li>Pull the ROADIES image from DockerHub:</li> </ol> <p><pre><code>docker pull ang037/roadies:latest\n</code></pre> 2. Launch a container:</p> <pre><code>docker run -it ang037/roadies:latest\n</code></pre> <p>These commands will launch the Docker container in interactive mode, with the roadies_env environment activated and the working directory set to the ROADIES repository containing all necessary files. Once you are able to access the ROADIES repository, refer to the Quick Start section to run the pipeline. </p>"},{"location":"install/#option-3-install-via-local-docker-build","title":"Option 3: Install via Local Docker Build","text":"<ol> <li>Clone the ROADIES repository:</li> </ol> <p><pre><code>git clone https://github.com/TurakhiaLab/ROADIES.git\n</code></pre> <pre><code>cd ROADIES\n</code></pre></p> <ol> <li>Build and run the Docker container:</li> </ol> <p><pre><code>docker build -t roadies_image .\n</code></pre> <pre><code>docker run -it roadies_image\n</code></pre></p> <p>Once you are able to access the ROADIES repository, refer to Quick Start instructions to run the pipeline. </p>"},{"location":"install/#option-4-install-via-source-script","title":"Option 4: Install via Source Script","text":"<ol> <li> <p>Install the following dependencies (requires sudo access):</p> </li> <li> <p>Java Runtime Environment (Version 1.7 or higher)</p> </li> <li>Python (Version 3.9 or higher)</li> <li><code>wget</code> and <code>unzip</code> commands</li> <li>GCC (Version 11.4 or higher)</li> <li>cmake (Download here: https://cmake.org/download/)</li> <li>Boost library (Download here: https://boostorg.jfrog.io/artifactory/main/release/1.82.0/source/)</li> <li>zlib (Download here: http://www.zlib.net/)</li> </ol> <p>For Ubuntu, you can install these dependencies with: </p> <pre><code>sudo apt-get install -y wget unzip make g++ python3 python3-pip python3-setuptools git default-jre libgomp1 libboost-all-dev cmake\n</code></pre> <ol> <li>Clone the repository:</li> </ol> <p><pre><code>git clone https://github.com/TurakhiaLab/ROADIES.git\n</code></pre> <pre><code>cd ROADIES\n</code></pre></p> <ol> <li>Run the installation script:</li> </ol> <p><pre><code>chmod +x roadies_env.sh\n</code></pre> <pre><code>source roadies_env.sh\n</code></pre></p> <p>After successful setup (Setup complete message), your environment <code>roadies_env</code> will be activated. Proceed to Quick Start.</p> <p>Note</p> <p>If you encounter issues with the Boost library, add its path to <code>$CPLUS_LIBRARY_PATH</code> and save it in <code>~/.bashrc</code>.</p>"},{"location":"quickstart/","title":"Quick start","text":"<p>After installing using one of the options mentioned in Quick Install, you're ready to run ROADIES! To get started:</p>"},{"location":"quickstart/#step-1-download-the-test-dataset-11-drosophila-genomes","title":"Step 1: Download the test dataset (11 Drosophila genomes):**","text":"<p>Make sure to run this step from the main ROADIES repository directory. </p> <pre><code>mkdir -p test/test_data &amp;&amp; cat test/input_genome_links.txt | xargs -I {} sh -c 'wget -O test/test_data/$(basename {}) {}'\n</code></pre> <p>This will save the datasets on a separate <code>test/test_data</code> folder within the repository</p>"},{"location":"quickstart/#step-2-run-the-pipeline","title":"Step 2: Run the pipeline","text":"<p>Note</p> <p>ROADIES by default runs multiple iterations for generating highly accurate trees. For quick testing, use <code>--noconverge</code> to run a single iteration.</p> <p>Full run (multiple iterations) <pre><code>python run_roadies.py --cores 16\n</code></pre> OR</p> <p>Quick test run (one iteration) <pre><code>python run_roadies.py --cores 16 --noconverge \n</code></pre></p>"},{"location":"quickstart/#step-3-analyze-output","title":"Step 3: Analyze Output:","text":"<ul> <li>Final UNROOTED newick tree saved as <code>roadies.nwk</code> in a separate <code>output_files</code> folder. </li> <li>Intermediate files (if <code>--noconverge</code> not used) saved in a separate <code>converge_files</code> folder. </li> </ul> <p>Note</p> <p>ROADIES outputs unrooted trees by default. You can reroot trees on your own or use the provided <code>reroot.py</code> script in <code>workflow/scripts/</code> (given a reference rooted species tree as input). </p>"},{"location":"troubleshooting/","title":"Troubleshooting Steps","text":""},{"location":"troubleshooting/#error-1-issues-with-pasta","title":"Error 1. Issues with PASTA","text":""},{"location":"troubleshooting/#solution","title":"Solution","text":"<p>When running the pipeline, if you encounter that the pipeline fails by the failure of PASTA, please install PASTA from source by executing the following commands. Please run the following steps from the main ROADIES repository directory (after doing <code>cd ROADIES</code>) - within the activated Conda environment:</p> <pre><code>git clone https://github.com/smirarab/pasta.git\ngit clone https://github.com/smirarab/sate-tools-linux.git\ncd pasta\npython3 setup.py develop --user\n</code></pre> <p>Also, in the <code>align.smk</code> file (inside the <code>workflow/rules</code> directory of the ROADIES repository), please replace any instance of <code>pasta.py</code> with <code>python pasta/run_pasta.py</code>, AND <code>run_seqtools.py</code> with <code>python pasta/run_seqtools.py</code>.</p> <p>After doing this change, please re-run the ROADIES pipeline.</p>"},{"location":"troubleshooting/#error-2-environment-conflict","title":"Error 2. Environment conflict","text":""},{"location":"troubleshooting/#solution_1","title":"Solution","text":"<p>If you encounter the following error message - <code>\"ls: relocation error: /lib64/libacl.so.1: symbol getxattr, version ATTR_1.0 not defined in file libattr.so.1 with link time reference\"</code>, please run the following command to resolve it: </p> <pre><code>export LD_LIBRARY_PATH=/usr/lib64/:${LD_LIBRARY_PATH}\n</code></pre>"},{"location":"troubleshooting/#error-3-mamba-not-found-in-the-shell","title":"Error 3. Mamba not found in the shell","text":"<p>When running the following command: <pre><code>$ python ROADIES/run_roadies.py --cores 1\n</code></pre> You may encounter this error:</p> <p><pre><code>rm: cannot remove 'output_files': No such file or directory\nUnlocking working directory.\nsnakemake --cores 1 --config mode=accurate config_path=config/config.yaml num_threads=0 --use-conda --rerun-incomplete\nConfig file config/config.yaml is extended by additional config specified via the command line.\nBuilding DAG of jobs...\nCreateCondaEnvironmentException:\nThe 'mamba' command is not available in the shell /usr/bin/bash that will be used by Snakemake. You have to ensure that it is in your PATH, e.g., first activating the conda base environment with `conda activate base`.The mamba package manager (https://github.com/mamba-org/mamba) is a fast and robust conda replacement. It is the recommended way of using Snakemake's conda integration. It can be installed with `conda install -n base -c conda-forge mamba`. If you still prefer to use conda, you can enforce that by setting `--conda-frontend conda`.\n</code></pre> This means <code>mamba</code> package manager is missing or not available in the environment.</p>"},{"location":"troubleshooting/#solution_2","title":"Solution","text":"<p>Install mamba:</p> <pre><code>conda install -n base -c conda-forge mamba\n</code></pre> <p>If you prefer using <code>conda</code>, you can enforce it by adding the <code>--conda-frontend</code> conda argument.</p> <p>Step 1: In the downloaded ROADIES repository, open the file <code>noconverge.py</code> inside the <code>workflow</code> folder (<code>ROADIES/workflow/noconverge.py</code>).</p> <p>Step 2: At line 31, add the argument <code>--conda-frontend conda</code> to the <code>cmd</code> command, as shown below:</p> <p><pre><code>cmd = [\n    \"snakemake\",\n    \"--cores\",\n    str(cores),\n    \"--config\",\n    \"mode=\" + str(mode),\n    \"config_path=\" + str(config_path),\n    \"num_threads=\" + str(num_threads),\n    \"--use-conda\",\n    \"--rerun-incomplete\",\n    \"--conda-frontend\", \"conda\"\n]\n</code></pre> Step 3: Rerun the pipeline as follows:</p> <pre><code>python run_roadies.py --cores 16\n</code></pre>"},{"location":"troubleshooting/#error-4-conda-not-recognized","title":"Error 4. Conda not recognized","text":"<p>This can happen if conda is not added to your system's PATH.</p>"},{"location":"troubleshooting/#solution_3","title":"Solution","text":"<p>To resolve this, please ensure conda is added to the PATH by running the following commands:</p> <pre><code>export PATH=\"$HOME/miniconda3/bin:$PATH\"\nsource ~/.bashrc\n</code></pre>"},{"location":"troubleshooting/#error-5-handling-dependencies-glibc","title":"Error 5. Handling dependencies (glibc)","text":""},{"location":"troubleshooting/#solution_4","title":"Solution","text":"<p>Ensure that the glibc version on your system is updated to 2.29 or higher. Update your system libraries if necessary. Otherwise you may encounter this error:</p> <pre><code>workflow/scripts/lastz_32: /lib64/libm.so.6: version 'GLIBC_2.29' not found\n</code></pre>"},{"location":"troubleshooting/#error-6-pasta-fails-with-insufficient-core-count","title":"Error 6. PASTA fails with insufficient core count","text":"<p>Pasta fails when the number of cores is insufficient for the number of instances.</p> <p>The pipeline provides <code>NUM_INSTANCES</code> as a configuration parameter in <code>config.yaml</code> to run multiple instances in parallel. Each instance can also be parallelized using threads. The number of threads per instance is calculated as:</p> <p><pre><code>num_threads = number_of_cores / num_instances\n</code></pre> If <code>num_instances &gt; number_of_cores</code>, then <code>num_threads</code> will be 0 and the process (e.g., <code>pasta</code>) will fail.</p>"},{"location":"troubleshooting/#solution_5","title":"Solution","text":"<p>Ensure that the number of cores is greater than or equal to the number of instances. By default, <code>NUM_INSTANCES</code> is set to 4, so the number of cores (<code>--cores</code> in command line argument) must be at least 4. To run the pipeline with fewer cores, modify the <code>NUM_INSTANCES</code> parameter in the config file:</p> <pre><code>python run_roadies.py --cores &lt;available_cores&gt; --config_path config/config.yaml\n</code></pre>"},{"location":"usage/","title":"Detailed Usage","text":"<p>This section provides detailed instructions on how to configure the ROADIES pipeline further for various user requirements with your own genomic dataset. Once the required environment setup process is complete, follow the steps below.</p>"},{"location":"usage/#step-1-specify-input-genomic-dataset","title":"Step 1: Specify input genomic dataset","text":"<p>After installing the environment, you need to get input genomic sequences for creating the species tree. To run ROADIES with your own dataset, update the <code>config.yaml</code> file (found in the ROADIES directory - <code>config</code> folder) to include the path to your input datasets under the <code>GENOMES</code> parameter.</p> <p>Note</p> <p>All input genome assemblies in the path mentioned in <code>GENOMES</code> should be in <code>.fa</code> or <code>.fa.gz</code> format. The genome assembly files should be named according to the species' names (for example, Aardvark's genome assembly is to be named <code>Aardvark.fa</code>). Each file should contain the genome assembly of one unique species. If a file contains multiple species, split it into individual genome files (fasplit can be used for this: <code>faSplit byname &lt;input_dir&gt; &lt;output_dir&gt;</code>). Moreover, the file name should not have any special characters like <code>.</code> (apart from <code>_</code>) - for example, if the file name is <code>Aardvark.1.fa</code>, rename it to <code>Aardvark_1.fa</code>.</p>"},{"location":"usage/#step-2-modify-other-configuration-paramters","title":"Step 2: Modify Other Configuration Paramters","text":"<p>Adjust other parameters listed in <code>config.yaml</code> as per specific user requirements. Details of the parameters are mentioned below.</p> <p>Note</p> <p>ROADIES has default values for some of the parameters that give the best results and are recommended in general. However, users can optionally modify the values specific to their needs.</p> Parameters Description Default value GENOMES Specify the path to your input files which includes raw genome assemblies of the species. REFERENCE (optional) Specify the path for the reference tree (state-of-the-art) in Newick format to compare ROADIES' results with a state-of-the-art approach. If you don't want to specify any reference tree, set it to <code>NULL</code>. <code>NULL</code> LENGTH Configure the lengths of each of the randomly sampled subsequences or genes. 500 GENE_COUNT Configure the number of genes to be sampled across all input genome assemblies. In normal mode, this will be the count of the genes to be sampled. In <code>--converge</code> mode, this will be the initial count of the number of genes for the first iteration and this value will be doubled iteratively. 250 UPPER_CASE Configure the lower limit threshold of upper cases for valid sampling. ROADIES samples the genes only if the percentage of upper cases in each gene is more than this value. 0.9 (Recommended) OUT_DIR Specify the path for ROADIES output files (this saves the current iteration results in converge mode). ALL_OUT_DIR Specify the path for ROADIES output files for all iterations in converge mode. MIN_ALIGN (deprecated) Specify the minimum number of allowed species to exist in gene fasta files after LASTZ. This parameter is used for filtering gene fasta files which has very less species representation. It is recommended to set the value greater than or equal to 4 since ASTRAL-Pro follows a quartet-based topology for species tree inference. For larger evolutionary timescales, we recommended setting it to a much higher value. In such cases, 15 to 20 would be a good start. 4 COVERAGE Set the percentage of input sequence included in the alignment for LASTZ. 85 CONTINUITY Define the allowable percentage of non-gappy alignment columns for LASTZ. 85 IDENTITY Set the percentage of the aligned base pairs (matches/mismatches) for LASTZ. For larger evolutionary timescales, consider lowering the identity values than default for more homologous hits to be encountered. 65 IDENTITY_DEEP Set the percentage of the aligned base pairs (matches/mismatches) for LASTZ, for larger evolutionary timescales (needed when <code>--deep True</code> - details below). 40 MAX_DUP Specify maximum number of allowed gene copies from one input genome in an alignment. 10 STEPS Specify the number of steps in the LASTZ sampling (increasing number speeds up alignment but decreases LASTZ accuracy). 1 FILTERFRAGMENTS Specify the portion so that sites with less than the specified portion of non-gap characters in PASTA alignments will be masked out. If it is set to 0.5, then sites with less than 50% of non-gap characters will be masked out. 0.5 MASKSITES Specify the portion so that sequences with less than the specified portion of non-gap sequences will be removed in PASTA alignment. If it is set to 0.05, then sequences having less than 5% of non-gap characters (i.e., more than 95% gaps) will be masked out. 0.02 SUPPORT_THRESHOLD Specify the threshold so that support values with equal to or higher than this threshold is considered as highly supported node. Such highly supported nodes crossing this threshold will be counted at every iteration to check the confidence of the tree (works in <code>--converge</code> mode). 0.95 NUM_INSTANCES Specify the number of instances for PASTA, LASTZ, MashTree and RAxML-NG to run in parallel. It is recommended to set the number of instances equal to (<code>--cores</code>/4) for optimal runtime. 4 SCORES Set the alignment scores for LASTZ (needed when <code>--deep True</code> - details below). <code>HOXD55.q</code> - file is provided along with the ROADIES package"},{"location":"usage/#step-3-run-the-roadies-pipeline","title":"Step 3: Run the ROADIES pipeline","text":"<p>Once the required installations are completed and the parameters are configured in <code>config.yaml</code> file, execute the following command (from ROADIES repo home directory):</p> <pre><code>python run_roadies.py --cores &lt;number of cores&gt;\n</code></pre> <p>This will let ROADIES run in accurate mode by default with specified number of cores. After the completion of the execution, the output species tree in Newick format will be saved as <code>roadies.nwk</code> in a separate <code>output_files</code> folder.</p>"},{"location":"usage/#command-line-arguments","title":"Command line arguments","text":"<p>There are multiple command line arguments through which user can change the mode of operation, specify the custom config file path, etc.</p> Argument Description <code>--cores</code> Specify the number of cores <code>--mode</code> Specify modes of operation (<code>accurate</code>, <code>balanced</code> or <code>fast</code>).<code>accurate</code> mode is the default mode. <code>--noconverge</code> Run ROADIES in non converge mode (for single iteration) if you know the optimal gene count to start with <code>--config</code> Provide optional custom YAML files (in the same format as <code>config.yaml</code> provided with this repository). If not given, by default <code>config/config.yaml</code> file will be considered. <code>--deep</code> Specify if ROADIES will evaluate deeper phylogeny. Set it to <code>True</code> or <code>False</code>. By default, its set to <code>False</code>. <p>For example:</p> <pre><code>python run_roadies.py --cores 16 --mode balanced --noconverge --config config/config.yaml --deep True\n</code></pre> <p>Use <code>--help</code> to get the list of command line arguments.</p>"},{"location":"usage/#step-4-analyze-output-files","title":"Step 4: Analyze output files","text":""},{"location":"usage/#output-from-current-iteration","title":"Output from current iteration","text":"<p>After the pipeline finishes running, the final species tree of current iteration estimated by ROADIES will be saved as <code>roadies.nwk</code> inside a separate folder mentioned in the <code>--OUT_DIR</code> parameter in the <code>config/config.yaml</code> file. </p> <p>ROADIES also provides a number of intermediate output files for extensive debugging by the user, described below:</p> <ol> <li><code>alignments</code> - this folder contains the LASTZ alignment output of all individual input genomes aligned with randomly sampled gene sequences.</li> <li><code>benchmarks</code> - this folder contains the runtime value of each of the individual jobs for each of the stages in the pipeline. These files will only be used if you want to estimate and compare the stagewise runtime of various pipeline stages and will not be used in final tree estimation. </li> <li><code>genes</code> - this folder contains the output files of multiple sequence alignment and tree-building stages (run by PASTA, IQTREE/FastTree, MashTree) of the pipeline. </li> <li><code>genetrees</code> - this folder contains two files as follows:<ul> <li><code>gene_tree_merged.nwk</code> - this file lists all gene trees together generated by IQTREE/FastTree/MashTree. It is used by ASTRAL-Pro to estimate the final species tree from this list of gene trees.</li> <li><code>original_list.txt</code> - this file lists all gene trees together corresponding to their gene IDs. Some lines will have only gene IDs but no associated gene trees. This is because some genes will be filtered out from tree building and MSA step if it has less than four species. Hence this file also lists those gene IDs with missing gene trees for further debugging. </li> </ul> </li> <li><code>plots</code> - this folder contains four following plots:<ul> <li><code>gene_dup.png</code> - this histogram plot represents the count of the number of gene duplicates on the Y-axis vs. the number of genes having duplication on the X-axis.</li> <li><code>homologues.png</code> - this histogram plot represents the count of the number of genes on the Y-axis vs. the number of homologous species on the X-axis.</li> <li><code>num_genes.png</code> - this plot represents how many genes out of <code>--GENE_COUNT</code> parameter have been aligned to each of the input genomes after the LASTZ step. The X-axis represents different genomes, and the Y-axis represents the number of genes.</li> <li><code>sampling.png</code> - the plot shows how many genes have been sampled from each of the input genomes after the random sampling step. The X-axis represents different genomes, and the Y-axis represents the number of genes.</li> </ul> </li> <li><code>samples</code> - this folder contains the list of randomly sampled genes from individual input genomes. <ul> <li><code>&lt;species_name&gt;_temp.fa</code> - these files contain genes sampled from the particular input genome.</li> <li><code>out.fa</code> - this file contains all sampled subsequences (genes) from individual genomes combined, which is given to the the LASTZ step. </li> </ul> </li> <li><code>statistics</code> - this folder contains CSV data for the plots shown in the <code>plots</code> directory mentioned above.<ul> <li><code>gene_to_species.csv</code> - this is an additional CSV file (corresponding plots to be added in future) which provides the information about which genes are aligned to what species after LASTZ step (<code>num_genes.csv</code> only gives the total count of the genes per species, <code>gene_to_species.csv</code> also gives the ID number of those aligned genes). Along with each gene ID number, it also provides the [score, line number in .maf file, position] of all the homologs of that particular gene. Score, position and line number information is collected from the corresponding species' .maf file (generated by LASTZ), saved in <code>results/alignments</code> folder.</li> </ul> </li> <li><code>roadies_stats.nwk</code>- this is the final estimated species tree (same as <code>roadies.nwk</code>), along with the support branch values in the Newick tree. </li> <li><code>roadies.nwk</code>- this is the final estimated species tree in Newick format.</li> <li><code>roadies_rerooted.nwk</code> (optional) - this is the final estimated species tree, re-rooted corresponding to the outgroup node from the given reference tree (provided as <code>REFERENCE</code> in <code>config.yaml</code>).</li> <li><code>time_stamps.csv</code> - this file contains the start time, number of gene trees required for estimating species tree, end time, and total runtime (in seconds), respectively.</li> <li><code>ref_dist.csv</code> - this file provides the number of gene trees and the Normalized Robinson-Foulds distance between the final estimated species tree (i.e., <code>roadies.nwk</code>) and the reference tree (i.e., REFERENCE parameter in <code>config.yaml</code>).</li> </ol>"},{"location":"usage/#extra-output-files-from-all-iterations-these-are-not-generated-if-noconverge-is-used","title":"Extra output files from all iterations (these are not generated if --noconverge is used)","text":"<p>By default, results of all iterations (along with the corresponding species tree in the name <code>iteration_&lt;iteration_number&gt;.nwk</code>) will be saved in a separate folder mentioned in the <code>--ALL_OUT_DIR</code> parameter in the <code>config/config.yaml</code> file.</p> <p>Note</p> <p>With <code>--noconverge</code> option, ROADIES only saves the results of the current ongoing iteration in the folder specified by <code>--OUT_DIR</code> and the files below won't be generated.</p> <p>For extensive debugging, other intermediate output files for each stage of the pipeline for each iterations are saved in <code>--ALL_OUT_DIR</code> as follows:</p> <ol> <li>Folder with <code>iteration_&lt;iteration_number&gt;</code> - this folder contains results from the specific iteration corresponding to the iteration number in the folder name.<ul> <li>Folder with name in <code>--OUT_DIR</code> - this contains the results of all stages of the pipeline (as described above in non convergence section). </li> <li><code>gene_tree_merged.nwk</code> - this file lists all gene trees together generated by IQTREE/FastTree/MashTree in that particular iteration. It is concatenated with master list of gene trees from all past iterations before providing to ASTRAL-Pro to estimate the final converged species tree.</li> <li><code>iteration_&lt;iteration_number&gt;.log</code> - this file contains the log information of the corresponding iteration execution. </li> <li><code>mapping.txt</code> - This file maps all gene names in the gene trees with the corresponding species name from where it originates. It is required by ASTRAL-Pro, along with the master list of gene trees from all iterations, to infer species tree. </li> </ul> </li> <li><code>iteration_&lt;iteration_number&gt;_stats.nwk</code> - this is the final estimated species tree for the corresponding iteration (same as <code>iteration_&lt;iteration_number&gt;.nwk</code>), along with the support branch values in the Newick tree. </li> <li><code>iteration_&lt;iteration_number&gt;.nwk</code> - this is the final estimated species tree for the corresponding iteration</li> <li><code>iteration_&lt;iteration_number&gt;.rerooted.nwk</code> - (optional) - this is the final estimated species tree for the corresponding iteration, re-rooted to the outgroup node from the given reference tree (provided as <code>REFERENCE</code> in <code>config.yaml</code>).</li> <li><code>master_gt.nwk</code> - this is the concatenated list of all gene trees from all iterations together.</li> <li><code>master_map.txt</code> - this is the concatenated list of all mapping files from all iterations together. This <code>master_gt.nwk</code> and <code>master_map.txt</code> is provided to ASTRAL-Pro after every iteration to get the converged species tree. </li> <li><code>ref_dist.csv</code> - this file provides the iteration number, number of gene trees and the Normalized Robinson-Foulds distance between the final estimated species tree (i.e., <code>roadies.nwk</code>) and the reference tree (i.e., REFERENCE parameter in <code>config.yaml</code>), for all iterations.</li> <li><code>time_stamps.csv</code>- this file contains the start time in first line, iteration number, number of gene trees required for estimating species tree, end time, and total runtime (in seconds), respectively, for all iterations in subsequent lines.</li> </ol>"},{"location":"usage/#run-roadies-in-a-multi-node-cluster-using-slurm-currently-being-tested","title":"Run ROADIES in a multi-node cluster (using SLURM) (currently being tested)","text":"<p>To run ROADIES in a multi-node cluster, make the following changes in the file <code>workflow/scripts/converge.py</code> (for <code>--noconverge</code> mode - make changes in <code>workflow/scripts/noconverge.py</code>)</p> <p>Replace below lines:</p> <pre><code>    cmd = [\n        \"snakemake\",\n         \"--cores\",\n         str(cores),\n         \"--config\",\n         \"mode=\" + str(mode),\n         \"config_path=\" + str(config_path),\n         \"num_threads=\" + str(num_threads),\n         \"deep_mode=\" + str(deep_mode),\n         \"MIN_ALIGN=\" + str(MIN_ALIGN),\n         \"--use-conda\",\n         \"--rerun-incomplete\",\n    ]\n</code></pre> <p>With below lines (you can change the value of <code>--jobs</code> and other account details based on your cluster configuration):</p> <pre><code>    cmd = [\n    \"snakemake\",\n    \"--jobs\",\n    \"4\",\n    \"--groups\",\n    \"lastz=group0\",\n    \"--group-components\",\n    \"group0=8\",\n    \"--config\",\n    \"mode=\" + str(mode),\n    \"config_path=\" + str(config_path),\n    \"num_threads=\" + str(num_threads),\n    \"--use-conda\",\n    \"--rerun-incomplete\",\n    \"--cluster\",\n    (\n        \"sbatch \"\n        \"--job-name=XXX \"\n        \"--partition=XXX \"\n        \"--account=XXX \"\n        \"--nodes=1 \"\n        \"--ntasks-per-node=4 \"\n        \"--cpus-per-task=8 \"\n        \"--time=8-0 \"\n        \"--mem-per-cpu=11G \"\n        \"--output=%x_%j.out \"\n        \"--error=%x_%j.err \"\n        \"--mail-user=XXX \"\n        \"--mail-type=ALL\"\n    )\n]\n</code></pre> <p>After the above changes, save the following lines of code as separate file called <code>roadies.slurm</code> and run <code>sbatch roadies.slurm</code>. <pre><code>#! /bin/bash\n#SBATCH -J ROADIES_XXX\n#SBATCH -p XXX\n#SBATCH --account=XXX\n#SBATCH --nodes=1\n#SBATCH --ntasks-per-node=1\n#SBATCH --cpus-per-task=32\n#SBATCH --time=8-0\n#SBATCH --mem-per-cpu=11G\n#SBATCH -o %x_%j.out \n#SBATCH -e %x_%j.err\n#SBATCH --mail-user=XXX\n#SBATCH --mail-type=ALL\n\necho Starting at `date`\necho This is job $SLURM_JOB_ID\necho Running on `hostname`\n\nsource /&lt;PATH&gt;/miniconda3/etc/profile.d/conda.sh\nconda activate myenv\ncd /&lt;PATH&gt;/miniconda3/envs/myenv/ROADIES\nsrun --nodes=1 python run_roadies.py --cores 128\n\necho Exiting at `date`\nsrun sleep 30\n</code></pre></p>"}]}